"""
Django settings for TestProject project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import datetime
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
LOG_DIR = BASE_DIR / 'logs'

os.makedirs(LOG_DIR, exist_ok=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kx&=db%6k!6pe38wmg2b9ur!n#&(58^i%r_jo2rxg#j4tc^_st'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# 使用自己的用户模型
AUTH_USER_MODEL = 'userSettings.CustomUser'

# 登录 URL
LOGIN_URL = '/login/'

# 登录成功后重定向的 URL
LOGIN_REDIRECT_URL = '/index/'

# 登出后重定向的 URL
LOGOUT_REDIRECT_URL = '/login/'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.packBench',
    'apps.navigation',
    'apps.userSettings',
    'django_celery_results',
    'django_celery_beat'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'TestProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates',
                 ]

        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TestProject.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'dj_db_conn_pool.backends.mysql',  # 数据库引擎（这里是外部的连接池）
        'NAME': 'TestProject-dve',  # 数据库名字
        'USER': 'root',
        'PASSWORD': 'hubangguo199780',
        'HOST': '127.0.0.1',  # ip
        'PORT': 3306,
        'POOL_OPTIONS': {
            'POOL_SIZE': 10,  # 最小
            'MAX_OVERFLOW': 10,  # 在最小的基础上，还可以增加10个，即：最大20个。
            'RECYCLE': 24 * 60 * 60,  # 连接可以被重复用多久，超过会重新创建，-1表示永久。
            'TIMEOUT': 30,  # 池中没有连接最多等待的时间。
        }
    }
}
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 1000,
                "encoding": "utf-8"
            },
            # "PASSWORD": "hubangguo199780",
        }
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'  # 中文简体

TIME_ZONE = 'Asia/Shanghai'  # 设置时区为中国标准时间（CST）
USE_TZ = False  # 启用时区支持，确保应用使用时区进行转换

USE_I18N = True  # # 启用国际化支持

USE_L10N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # 这是静态文件的物理存储路径
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'  # 静态文件版本控制避免缓存问题
STATICFILES_DIRS = [
    BASE_DIR / "static",  # 项目根目录下的 static 文件夹
    # 如果你有其他文件夹，可以继续添加
    # BASE_DIR / "another_static_folder",
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'apps/packBench/static'),  # 您的静态文件目录
]

MEDIA_URL = '/media/'  # 媒体文件的访问路径
MEDIA_ROOT = BASE_DIR / 'media'  # 媒体文件的存储路径

AUTHENTICATION_BACKENDS = [

    'apps.userSettings.backends.PhoneNumberBackend',  # 自定义后端
    'django.contrib.auth.backends.ModelBackend',  # 默认后端
]

# django-celery  配置的部分
# 设置redis消息队列
CELERY_BROKER_URL = 'redis://localhost:6379/0'

# 使用 Django 数据库存储任务结果
CELERY_RESULT_BACKEND = 'django-db'

# 使用 Django 缓存作为中间结果存储
CELERY_CACHE_BACKEND = 'django-cache'

# 配置 Celery Beat 调度器
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# celery内容等消息的格式设置，默认json
CELERY_ACCEPT_CONTENT = ['application/json', ]
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# 时间格式化为中国时间
CELERY_TIMEZONE = TIME_ZONE
# 是否使用UTC时间
CELERY_ENABLE_UTC = False

# 为存储结果设置过期日期，默认1天过期。如果beat开启，Celery每天会自动清除。
# 设为0，存储结果永不过期
CELERY_RESULT_EXPIRES = 60 * 60 * 24

# 任务限流
CELERY_TASK_ANNOTATIONS = {'tasks.add': {'rate_limit': '2/s'}}

# Worker并发数量，一般默认CPU核数，可以不设置
CELERY_WORKER_CONCURRENCY = 2

CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True  # 启动时重试
CELERY_TASK_ACKS_LATE = True  # 允许重试中断的任务
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # 公平调度
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [  # 认证方式
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#         # 'rest_framework.authentication.SessionAuthentication',
#         'rest_framework.authentication.BasicAuthentication',
#         'ext.auth.MultiAuthTokenAuthentication'
#     ],
#
#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',  # 分页方式
#     'PAGE_SIZE': 50,
#
#     'DEFAULT_PERMISSION_CLASSES': [  # 权限控制
#         'rest_framework.permissions.IsAuthenticated',  # 默认需要认证
#     ],
#     'DEFAULT_FILTER_BACKENDS': [  # 过滤器
#         'django_filters.rest_framework.DjangoFilterBackend'
#     ]
#
# }
#
# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=60),  # Access Token 有效期
#     'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=7),  # Refresh Token 有效期
#     'ROTATE_REFRESH_TOKENS': True,  # 允许刷新 Token
#     'UPDATE_LAST_LOGIN': True,  # 更新最后登录时间
# }

# 日志配置
# LOGGING = {
#     # 基本配置
#     'version': 1,  # 必须设置为1，表示使用新版日志配置格式
#     'disable_existing_loggers': False,  # 是否禁用已存在的logger，False表示不禁用
#
#     # 日志格式定义
#     'formatters': {
#         # 详细格式，包含日志级别、时间、模块名和消息
#         'verbose': {
#             'format': '{levelname} {asctime} [{name}] {message}',  # 日志格式模板
#             'style': '{',  # 使用新式字符串格式化
#         },
#         # 简单格式，只包含日志级别和消息（主要用于控制台输出）
#         'simple': {
#             'format': '{levelname} {message}',
#             'style': '{',
#         },
#     },
#
#     # 处理器定义（日志输出到哪里）
#     'handlers': {
#         # Django框架日志处理器（写入文件）
#         'django_file': {
#             'level': 'INFO',  # 只记录INFO及以上级别的日志
#             'class': 'logging.handlers.TimedRotatingFileHandler',  # 按时间分割文件的处理器
#             'filename': LOG_DIR / 'django.log',  # 日志文件路径
#             'when': 'midnight',  # 每天午夜分割日志
#             'backupCount': 7,  # 保留7天的日志备份
#             'formatter': 'verbose',  # 使用详细格式
#             'encoding': 'utf-8',  # 文件编码
#         },
#
#         # Celery日志处理器（写入文件）
#         'celery_file': {
#             'level': 'DEBUG',  # 记录所有DEBUG及以上级别的日志
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': LOG_DIR / 'celery.log',
#             'when': 'midnight',
#             'backupCount': 7,
#             'formatter': 'verbose',
#             'encoding': 'utf-8',
#         },
#         'task_file': {
#             'level': 'DEBUG',  # 记录所有DEBUG及以上级别的日志
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': LOG_DIR / 'task.log',
#             'when': 'midnight',
#             'backupCount': 7,
#             'formatter': 'verbose',
#             'encoding': 'utf-8',
#         },
#
#         # 通用日志处理器（用于未特殊分类的日志）
#         'all_logs_file': {
#             'level': 'DEBUG',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': LOG_DIR / 'all.log',
#             'when': 'midnight',
#             'backupCount': 7,
#             'formatter': 'verbose',
#             'encoding': 'utf-8',
#         },
#     },
#
#     # 日志记录器配置（决定哪些日志由哪些处理器处理）
#     'loggers': {
#         # Django框架日志
#         'django': {
#             'handlers': ['django_file'],  # 只使用django_file处理器
#             'level': 'INFO',  # 记录INFO及以上级别
#             'propagate': False,  # 不向父logger传递
#         },
#
#         # Celery核心日志
#         'celery': {
#             'handlers': ['celery_file'],  # 同时输出到文件和控制台
#             'level': 'DEBUG',  # 记录所有DEBUG及以上级别
#             'propagate': False,  # 不向父logger传递
#         },
#
#         # 自定义任务日志
#         'task': {
#             'handlers': ['task_file'],  # 输出到通用日志文件和控制台
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#
#         # 根记录器（捕获所有未明确指定的日志）
#         '': {
#             'handlers': ['all_logs_file'],  # 所有未分类日志都进入all.log
#             'level': 'DEBUG',
#             'propagate': True,  # 允许向更高级别的logger传递
#         },
#     },
# }
